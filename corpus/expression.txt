========================================
Lambda (\(x : a) -> b)
========================================

\(x : a) -> b

---

(source_file (complete_expression
  (expression (lambda)
  (open_parens)
  (label (simple_label)) (colon) (expression (annotated_expression (operator_expression (import_alt_expression (or_expression (plus_expression (text_append_expression (list_append_expression (and_expression (combine_expression (prefer_expression (combine_types_expression (times_expression (equal_expression (not_equal_expression (application_expression (import_expression (selector_expression (primitive_expression (identifier (label (simple_label))))))))))))))))))))))
  (close_parens)
  (arrow)
  (expression (annotated_expression (operator_expression (import_alt_expression (or_expression (plus_expression (text_append_expression (list_append_expression (and_expression (combine_expression (prefer_expression (combine_types_expression (times_expression (equal_expression (not_equal_expression (application_expression (import_expression (selector_expression (primitive_expression (identifier (label (simple_label)))))))))))))))))))))))))

========================================
Lambda (λ(x : a) → b)
========================================

λ(x : a) → b

---

(source_file (complete_expression
  (expression (lambda)
  (open_parens)
  (label (simple_label)) (colon) (expression (annotated_expression (operator_expression (import_alt_expression (or_expression (plus_expression (text_append_expression (list_append_expression (and_expression (combine_expression (prefer_expression (combine_types_expression (times_expression (equal_expression (not_equal_expression (application_expression (import_expression (selector_expression (primitive_expression (identifier (label (simple_label))))))))))))))))))))))
  (close_parens)
  (arrow)
  (expression (annotated_expression (operator_expression (import_alt_expression (or_expression (plus_expression (text_append_expression (list_append_expression (and_expression (combine_expression (prefer_expression (combine_types_expression (times_expression (equal_expression (not_equal_expression (application_expression (import_expression (selector_expression (primitive_expression (identifier (label (simple_label)))))))))))))))))))))))))

=======================================
If (if a then b else c)
=======================================

if a then b else c

---

(source_file (complete_expression (expression
  (if (if_raw)) (expression (annotated_expression (operator_expression (import_alt_expression (or_expression (plus_expression (text_append_expression (list_append_expression (and_expression (combine_expression (prefer_expression (combine_types_expression (times_expression (equal_expression (not_equal_expression (application_expression (import_expression (selector_expression (primitive_expression (identifier (label (simple_label))))))))))))))))))))))
  (then (then_raw)) (expression (annotated_expression (operator_expression (import_alt_expression (or_expression (plus_expression (text_append_expression (list_append_expression (and_expression (combine_expression (prefer_expression (combine_types_expression (times_expression (equal_expression (not_equal_expression (application_expression (import_expression (selector_expression (primitive_expression (identifier (label (simple_label))))))))))))))))))))))
  (else (else_raw)) (expression (annotated_expression (operator_expression (import_alt_expression (or_expression (plus_expression (text_append_expression (list_append_expression (and_expression (combine_expression (prefer_expression (combine_types_expression (times_expression (equal_expression (not_equal_expression (application_expression (import_expression (selector_expression (primitive_expression (identifier (label (simple_label)))))))))))))))))))))))))

========================================
Let (type-annotated)
========================================

let x : t = e1 in e2

---

(source_file (complete_expression (expression
  (let (let_raw))
  (label (simple_label)) (colon) (expression (annotated_expression (operator_expression (import_alt_expression (or_expression (plus_expression (text_append_expression (list_append_expression (and_expression (combine_expression (prefer_expression (combine_types_expression (times_expression (equal_expression (not_equal_expression (application_expression (import_expression (selector_expression (primitive_expression (identifier (label (simple_label))))))))))))))))))))))
  (equal)
  (expression (annotated_expression (operator_expression (import_alt_expression (or_expression (plus_expression (text_append_expression (list_append_expression (and_expression (combine_expression (prefer_expression (combine_types_expression (times_expression (equal_expression (not_equal_expression (application_expression (import_expression (selector_expression (primitive_expression (identifier (label (simple_label))))))))))))))))))))))
  (in (in_raw))
  (expression (annotated_expression (operator_expression (import_alt_expression (or_expression (plus_expression (text_append_expression (list_append_expression (and_expression (combine_expression (prefer_expression (combine_types_expression (times_expression (equal_expression (not_equal_expression (application_expression (import_expression (selector_expression (primitive_expression (identifier (label (simple_label)))))))))))))))))))))))))

========================================
Let (non-type-annotated)
========================================

let x = e1 in e2

---

(source_file (complete_expression (expression
  (let (let_raw))
  (label (simple_label))
  (equal)
  (expression (annotated_expression (operator_expression (import_alt_expression (or_expression (plus_expression (text_append_expression (list_append_expression (and_expression (combine_expression (prefer_expression (combine_types_expression (times_expression (equal_expression (not_equal_expression (application_expression (import_expression (selector_expression (primitive_expression (identifier (label (simple_label))))))))))))))))))))))
  (in (in_raw))
  (expression (annotated_expression (operator_expression (import_alt_expression (or_expression (plus_expression (text_append_expression (list_append_expression (and_expression (combine_expression (prefer_expression (combine_types_expression (times_expression (equal_expression (not_equal_expression (application_expression (import_expression (selector_expression (primitive_expression (identifier (label (simple_label)))))))))))))))))))))))))

========================================
Let (nested)
========================================

let x = e1 let y = e2 in e3

---

(source_file (complete_expression (expression
  (let (let_raw)) (label (simple_label)) (equal)
    (expression (annotated_expression (operator_expression (import_alt_expression (or_expression (plus_expression (text_append_expression (list_append_expression (and_expression (combine_expression (prefer_expression (combine_types_expression (times_expression (equal_expression (not_equal_expression (application_expression (import_expression (selector_expression (primitive_expression (identifier (label (simple_label))))))))))))))))))))))
  (let (let_raw)) (label (simple_label)) (equal)
    (expression (annotated_expression (operator_expression (import_alt_expression (or_expression (plus_expression (text_append_expression (list_append_expression (and_expression (combine_expression (prefer_expression (combine_types_expression (times_expression (equal_expression (not_equal_expression (application_expression (import_expression (selector_expression (primitive_expression (identifier (label (simple_label))))))))))))))))))))))
  (in (in_raw))
    (expression (annotated_expression (operator_expression (import_alt_expression (or_expression (plus_expression (text_append_expression (list_append_expression (and_expression (combine_expression (prefer_expression (combine_types_expression (times_expression (equal_expression (not_equal_expression (application_expression (import_expression (selector_expression (primitive_expression (identifier (label (simple_label)))))))))))))))))))))))))

========================================
Forall (forall (x : a) -> b)
========================================

forall (x : a) -> b

---

(source_file (complete_expression (expression
  (forall)
  (open_parens) (label (simple_label)) (colon) (expression (annotated_expression (operator_expression (import_alt_expression (or_expression (plus_expression (text_append_expression (list_append_expression (and_expression (combine_expression (prefer_expression (combine_types_expression (times_expression (equal_expression (not_equal_expression (application_expression (import_expression (selector_expression (primitive_expression (identifier (label (simple_label))))))))))))))))))))))
  (close_parens)
  (arrow)
  (expression (annotated_expression (operator_expression (import_alt_expression (or_expression (plus_expression (text_append_expression (list_append_expression (and_expression (combine_expression (prefer_expression (combine_types_expression (times_expression (equal_expression (not_equal_expression (application_expression (import_expression (selector_expression (primitive_expression (identifier (label (simple_label)))))))))))))))))))))))))

========================================
Forall (∀ (x : a) → b)
========================================

∀ (x : a) → b

---

(source_file (complete_expression (expression
  (forall)
  (open_parens) (label (simple_label)) (colon) (expression (annotated_expression (operator_expression (import_alt_expression (or_expression (plus_expression (text_append_expression (list_append_expression (and_expression (combine_expression (prefer_expression (combine_types_expression (times_expression (equal_expression (not_equal_expression (application_expression (import_expression (selector_expression (primitive_expression (identifier (label (simple_label))))))))))))))))))))))
  (close_parens)
  (arrow)
  (expression (annotated_expression (operator_expression (import_alt_expression (or_expression (plus_expression (text_append_expression (list_append_expression (and_expression (combine_expression (prefer_expression (combine_types_expression (times_expression (equal_expression (not_equal_expression (application_expression (import_expression (selector_expression (primitive_expression (identifier (label (simple_label)))))))))))))))))))))))))

========================================
Arrow (a -> b)
========================================

a -> b

---

(source_file (complete_expression (expression
  (operator_expression (import_alt_expression (or_expression (plus_expression (text_append_expression (list_append_expression (and_expression (combine_expression (prefer_expression (combine_types_expression (times_expression (equal_expression (not_equal_expression (application_expression (import_expression (selector_expression (primitive_expression (identifier (label (simple_label))))))))))))))))))))
  (arrow)
  (expression (annotated_expression (operator_expression (import_alt_expression (or_expression (plus_expression (text_append_expression (list_append_expression (and_expression (combine_expression (prefer_expression (combine_types_expression (times_expression (equal_expression (not_equal_expression (application_expression (import_expression (selector_expression (primitive_expression (identifier (label (simple_label)))))))))))))))))))))))))

========================================
Annotated (type-annotated merge)
========================================

merge e1 e2 : t

---

(source_file (complete_expression (expression (annotated_expression
  (merge (merge_raw))
  (import_expression (selector_expression (primitive_expression (identifier (label (simple_label))))))
  (import_expression (selector_expression (primitive_expression (identifier (label (simple_label))))))
  (colon)
  (application_expression (import_expression (selector_expression (primitive_expression (identifier (label (simple_label)))))))))))

========================================
Annotated (non-type-annotated merge)
========================================

merge e1 e2

---

(source_file (complete_expression (expression (annotated_expression
  (merge (merge_raw))
  (import_expression (selector_expression (primitive_expression (identifier (label (simple_label))))))
  (import_expression (selector_expression (primitive_expression (identifier (label (simple_label))))))))))

========================================
Annotated (empty List)
========================================

[] : List Natural

---

(source_file (complete_expression (expression (annotated_expression (open_bracket) (empty_collection (close_bracket) (colon) (List (List_raw)) (import_expression (selector_expression (primitive_expression (reserved (reserved_raw (Natural_raw)))))))))))

========================================
Annotated (empty Optional)
========================================

[] : Optional Natural

---

(source_file (complete_expression (expression (annotated_expression (open_bracket) (empty_collection (close_bracket) (colon) (Optional (Optional_raw)) (import_expression (selector_expression (primitive_expression (reserved (reserved_raw (Natural_raw)))))))))))

========================================
Annotated (non-empty Optional)
========================================

[5] : Optional Natural

---

(source_file (complete_expression (expression (annotated_expression (open_bracket) (non_empty_optional (expression (annotated_expression (operator_expression (import_alt_expression (or_expression (plus_expression (text_append_expression (list_append_expression (and_expression (combine_expression (prefer_expression (combine_types_expression (times_expression (equal_expression (not_equal_expression (application_expression (import_expression (selector_expression (primitive_expression (natural_literal (natural_literal_raw))))))))))))))))))))) (close_bracket) (colon) (Optional (Optional_raw)) (import_expression (selector_expression (primitive_expression (reserved (reserved_raw (Natural_raw)))))))))))
